{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "description": "Account Instantiate Msg https://github.com/burnt-labs/contracts/blob/main/contracts/account/src/msg.rs",
  "type": "object",
  "required": [
    "owner"
  ],
  "properties": {
    "account_id": {
      "anyOf": [
        {
          "$ref": "#/definitions/AccountId"
        },
        {
          "type": "null"
        }
      ]
    },
    "authenticator": {
      "anyOf": [
        {
          "$ref": "#/definitions/AddAuthenticator"
        },
        {
          "type": "null"
        }
      ]
    },
    "description": {
      "type": [
        "string",
        "null"
      ]
    },
    "install_modules": {
      "description": "Optionally modules can be provided. They will be installed after account registration.",
      "default": [],
      "type": "array",
      "items": {
        "$ref": "#/definitions/ModuleInstallConfig"
      }
    },
    "link": {
      "type": [
        "string",
        "null"
      ]
    },
    "name": {
      "type": [
        "string",
        "null"
      ]
    },
    "namespace": {
      "type": [
        "string",
        "null"
      ]
    },
    "owner": {
      "$ref": "#/definitions/GovernanceDetails_for_String"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AccountId": {
      "description": "Unique identifier for an account. On each chain this is unique.",
      "type": "object",
      "required": [
        "seq",
        "trace"
      ],
      "properties": {
        "seq": {
          "description": "Unique identifier for the accounts create on a local chain. Is reused when creating an interchain account.",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "trace": {
          "description": "Sequence of the chain that triggered the IBC account creation `AccountTrace::Local` if the account was created locally Example: Account created on Juno which has an abstract interchain account on Osmosis, which in turn creates an interchain account on Terra -> `AccountTrace::Remote(vec![\"juno\", \"osmosis\"])`",
          "allOf": [
            {
              "$ref": "#/definitions/AccountTrace"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "AccountTrace": {
      "description": "The identifier of chain that triggered the account creation",
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "local"
          ]
        },
        {
          "type": "object",
          "required": [
            "remote"
          ],
          "properties": {
            "remote": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TruncatedChainId"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AddAuthenticator": {
      "description": "Note: Instead of transaction bytes address of the Abstract Account used",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "secp256_k1"
          ],
          "properties": {
            "secp256_k1": {
              "type": "object",
              "required": [
                "id",
                "pubkey",
                "signature"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "pubkey": {
                  "$ref": "#/definitions/Binary"
                },
                "signature": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "ed25519"
          ],
          "properties": {
            "ed25519": {
              "type": "object",
              "required": [
                "id",
                "pubkey",
                "signature"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "pubkey": {
                  "$ref": "#/definitions/Binary"
                },
                "signature": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "eth_wallet"
          ],
          "properties": {
            "eth_wallet": {
              "type": "object",
              "required": [
                "address",
                "id",
                "signature"
              ],
              "properties": {
                "address": {
                  "type": "string"
                },
                "id": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "signature": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "jwt"
          ],
          "properties": {
            "jwt": {
              "type": "object",
              "required": [
                "aud",
                "id",
                "sub",
                "token"
              ],
              "properties": {
                "aud": {
                  "type": "string"
                },
                "id": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "sub": {
                  "type": "string"
                },
                "token": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "secp256_r1"
          ],
          "properties": {
            "secp256_r1": {
              "type": "object",
              "required": [
                "id",
                "pubkey",
                "signature"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "pubkey": {
                  "$ref": "#/definitions/Binary"
                },
                "signature": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "passkey"
          ],
          "properties": {
            "passkey": {
              "type": "object",
              "required": [
                "credential",
                "id",
                "url"
              ],
              "properties": {
                "credential": {
                  "$ref": "#/definitions/Binary"
                },
                "id": {
                  "type": "integer",
                  "format": "uint8",
                  "minimum": 0.0
                },
                "url": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "GovernanceDetails_for_String": {
      "description": "Governance types",
      "oneOf": [
        {
          "description": "A single address is admin",
          "type": "object",
          "required": [
            "monarchy"
          ],
          "properties": {
            "monarchy": {
              "type": "object",
              "required": [
                "monarch"
              ],
              "properties": {
                "monarch": {
                  "description": "The monarch's address",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Used when the account is a sub-account of another account.",
          "type": "object",
          "required": [
            "sub_account"
          ],
          "properties": {
            "sub_account": {
              "type": "object",
              "required": [
                "account"
              ],
              "properties": {
                "account": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "An external governance source",
          "type": "object",
          "required": [
            "external"
          ],
          "properties": {
            "external": {
              "type": "object",
              "required": [
                "governance_address",
                "governance_type"
              ],
              "properties": {
                "governance_address": {
                  "description": "The external contract address",
                  "type": "string"
                },
                "governance_type": {
                  "description": "Governance type used for doing extra off-chain queries depending on the type.",
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "n_f_t"
          ],
          "properties": {
            "n_f_t": {
              "type": "object",
              "required": [
                "collection_addr",
                "token_id"
              ],
              "properties": {
                "collection_addr": {
                  "type": "string"
                },
                "token_id": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Abstract account. Admin actions have to be sent through signature bit flag\n\nMore details: https://github.com/burnt-labs/abstract-account/blob/2c933a7b2a8dacc0ae5bf4344159a7d4ab080135/README.md",
          "type": "object",
          "required": [
            "abstract_account"
          ],
          "properties": {
            "abstract_account": {
              "type": "object",
              "required": [
                "address"
              ],
              "properties": {
                "address": {
                  "description": "Address of this abstract account",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Addr"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Renounced account This account no longer has an owner and cannot be used.",
          "type": "object",
          "required": [
            "renounced"
          ],
          "properties": {
            "renounced": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ModuleInfo": {
      "description": "Stores the namespace, name, and version of an Abstract module.",
      "type": "object",
      "required": [
        "name",
        "namespace",
        "version"
      ],
      "properties": {
        "name": {
          "description": "Name of the contract",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the module",
          "allOf": [
            {
              "$ref": "#/definitions/Namespace"
            }
          ]
        },
        "version": {
          "description": "Version of the module",
          "allOf": [
            {
              "$ref": "#/definitions/ModuleVersion"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ModuleInstallConfig": {
      "description": "Module info and init message",
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "init_msg": {
          "anyOf": [
            {
              "$ref": "#/definitions/Binary"
            },
            {
              "type": "null"
            }
          ]
        },
        "module": {
          "$ref": "#/definitions/ModuleInfo"
        }
      },
      "additionalProperties": false
    },
    "ModuleVersion": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "latest"
          ]
        },
        {
          "type": "object",
          "required": [
            "version"
          ],
          "properties": {
            "version": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Namespace": {
      "description": "Represents an Abstract namespace for modules",
      "type": "string"
    },
    "TruncatedChainId": {
      "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
      "type": "string"
    }
  }
}
