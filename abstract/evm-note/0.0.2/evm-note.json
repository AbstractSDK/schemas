{
  "contract_name": "evm-note",
  "contract_version": "0.0.2",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "block_max_gas"
    ],
    "properties": {
      "block_max_gas": {
        "description": "The max gas allowed in a transaction. When returning callbacks the module will use this to calculate the amount of gas to save for handling a callback error. This protects from callbacks that run out of gas preventing ACKs or timeouts from being returned.\n\nThe contract admin can update with `MigrateMsg::WithUpdate`.",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "pair": {
        "description": "This contract pairs with the first voice module that a relayer connects it with, or the pair specified here. Once it has a pair, it will never handshake with a different voice module, even after channel closure. This ensures that there will only ever be one voice for every note.",
        "anyOf": [
          {
            "$ref": "#/definitions/Pair"
          },
          {
            "type": "null"
          }
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Pair": {
        "description": "This contract's voice. There is one voice per note, and many notes per voice.",
        "type": "object",
        "required": [
          "connection_id",
          "remote_port"
        ],
        "properties": {
          "connection_id": {
            "type": "string"
          },
          "remote_port": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Performs the requested queries on the voice chain and returns a callback of Vec<QuerierResult>, or ACK-FAIL if unmarshalling any of the query requests fails. Executes the requested messages on the voice chain on behalf of the note chain sender. Message receivers can return data in their callbacks by calling `set_data` on their `Response` object. Optionally, returns a callback of `Vec<Callback>` where index `i` corresponds to the callback for `msgs[i]`.\n\nAccounts are created on the voice chain after the first call to execute by the local address. To create an account, but perform no additional actions, pass an empty list to `msgs`. Accounts are queryable via the `RemoteAddress { local_address }` query after they have been created.",
        "type": "object",
        "required": [
          "execute"
        ],
        "properties": {
          "execute": {
            "type": "object",
            "required": [
              "msgs",
              "timeout_seconds"
            ],
            "properties": {
              "callback": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/CallbackRequest"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "msgs": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/EvmMsg_for_String"
                }
              },
              "timeout_seconds": {
                "$ref": "#/definitions/Uint64"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "CallbackRequest": {
        "description": "A request for a callback.",
        "type": "object",
        "required": [
          "msg",
          "receiver"
        ],
        "properties": {
          "msg": {
            "$ref": "#/definitions/Binary"
          },
          "receiver": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "EvmMsg_for_String": {
        "description": "A message to be sent to the EVM",
        "oneOf": [
          {
            "description": "Call a contract with the given data",
            "type": "object",
            "required": [
              "call"
            ],
            "properties": {
              "call": {
                "type": "object",
                "required": [
                  "data",
                  "to"
                ],
                "properties": {
                  "allow_failure": {
                    "description": "Don't revert entire batch when this transaction fails",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "data": {
                    "description": "The calldata to send to the contract",
                    "allOf": [
                      {
                        "$ref": "#/definitions/HexBinary"
                      }
                    ]
                  },
                  "to": {
                    "description": "The address of the contract to call, must pass checksum validation",
                    "type": "string"
                  },
                  "value": {
                    "description": "Native ETH used in the tx",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Delegate a call to an external contract. This is dangerous and should be used with caution.",
            "type": "object",
            "required": [
              "delegate_call"
            ],
            "properties": {
              "delegate_call": {
                "type": "object",
                "required": [
                  "data",
                  "to"
                ],
                "properties": {
                  "allow_failure": {
                    "description": "Don't revert entire batch when this transaction fails",
                    "type": [
                      "boolean",
                      "null"
                    ]
                  },
                  "data": {
                    "description": "The calldata to send to the contract",
                    "allOf": [
                      {
                        "$ref": "#/definitions/HexBinary"
                      }
                    ]
                  },
                  "to": {
                    "description": "The address of the contract to call, must pass checksum validation",
                    "type": "string"
                  },
                  "value": {
                    "description": "Native ETH used in the tx",
                    "anyOf": [
                      {
                        "$ref": "#/definitions/Uint128"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "HexBinary": {
        "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "This channel this note is currently connected to, or none if no channel is connected.",
        "type": "string",
        "enum": [
          "active_channel"
        ]
      },
      {
        "description": "The contract's corresponding voice on a remote chain.",
        "type": "string",
        "enum": [
          "pair"
        ]
      },
      {
        "description": "Returns the remote address for the provided local address. If no account exists, returns `None`. An account can be created by calling `ExecuteMsg::Execute` with the sender being `local_address`.",
        "type": "object",
        "required": [
          "remote_address"
        ],
        "properties": {
          "remote_address": {
            "type": "object",
            "required": [
              "local_address"
            ],
            "properties": {
              "local_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Currently set gas limit",
        "type": "string",
        "enum": [
          "block_max_gas"
        ]
      },
      {
        "description": "Returns the stored ack info for debugging purposes.",
        "type": "object",
        "required": [
          "ack_infos"
        ],
        "properties": {
          "ack_infos": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint8",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "ack_infos": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AckInfosResponse",
      "type": "object",
      "required": [
        "acks"
      ],
      "properties": {
        "acks": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/definitions/AckInfo"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AckInfo": {
          "type": "object",
          "required": [
            "height",
            "result",
            "sent"
          ],
          "properties": {
            "height": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "index": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint32",
              "minimum": 0.0
            },
            "result": {
              "$ref": "#/definitions/Callback"
            },
            "sent": {
              "$ref": "#/definitions/SentPacketData"
            }
          },
          "additionalProperties": false
        },
        "Callback": {
          "oneOf": [
            {
              "description": "Result of executing the requested messages, or an error.\n\n14/04/23: if a submessage errors the reply handler can see `codespace: wasm, code: 5`, but not the actual error. as a result, we can't return good errors for Execution and this error string will only tell you the error's codespace. for example, an out-of-gas error is code 11 and looks like `codespace: sdk, code: 11`.",
              "type": "object",
              "required": [
                "execute"
              ],
              "properties": {
                "execute": {
                  "$ref": "#/definitions/Result_of_ExecutionResponse_or_String"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "An error occured that could not be recovered from. The only known way that this can occur is message handling running out of gas, in which case the error will be `codespace: sdk, code: 11`.\n\nThis error is not named because it could also occur due to a panic or unhandled error during message processing. We don't expect this to happen and have carefully written the code to avoid it.",
              "type": "object",
              "required": [
                "fatal_error"
              ],
              "properties": {
                "fatal_error": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "EvmMsg_for_String": {
          "description": "A message to be sent to the EVM",
          "oneOf": [
            {
              "description": "Call a contract with the given data",
              "type": "object",
              "required": [
                "call"
              ],
              "properties": {
                "call": {
                  "type": "object",
                  "required": [
                    "data",
                    "to"
                  ],
                  "properties": {
                    "allow_failure": {
                      "description": "Don't revert entire batch when this transaction fails",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "data": {
                      "description": "The calldata to send to the contract",
                      "allOf": [
                        {
                          "$ref": "#/definitions/HexBinary"
                        }
                      ]
                    },
                    "to": {
                      "description": "The address of the contract to call, must pass checksum validation",
                      "type": "string"
                    },
                    "value": {
                      "description": "Native ETH used in the tx",
                      "anyOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Delegate a call to an external contract. This is dangerous and should be used with caution.",
              "type": "object",
              "required": [
                "delegate_call"
              ],
              "properties": {
                "delegate_call": {
                  "type": "object",
                  "required": [
                    "data",
                    "to"
                  ],
                  "properties": {
                    "allow_failure": {
                      "description": "Don't revert entire batch when this transaction fails",
                      "type": [
                        "boolean",
                        "null"
                      ]
                    },
                    "data": {
                      "description": "The calldata to send to the contract",
                      "allOf": [
                        {
                          "$ref": "#/definitions/HexBinary"
                        }
                      ]
                    },
                    "to": {
                      "description": "The address of the contract to call, must pass checksum validation",
                      "type": "string"
                    },
                    "value": {
                      "description": "Native ETH used in the tx",
                      "anyOf": [
                        {
                          "$ref": "#/definitions/Uint128"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ExecuteResult": {
          "type": "object",
          "required": [
            "data",
            "success"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/HexBinary"
            },
            "success": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        "ExecutionResponse": {
          "type": "object",
          "required": [
            "executed_by",
            "result"
          ],
          "properties": {
            "executed_by": {
              "description": "The address on the remote chain that executed the messages.",
              "type": "string"
            },
            "result": {
              "description": "Index `i` corresponds to the result of executing the `i`th message.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExecuteResult"
              }
            }
          },
          "additionalProperties": false
        },
        "HexBinary": {
          "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "Msg": {
          "description": "Message sent to EVM Voice contract",
          "oneOf": [
            {
              "description": "Execute a message on the EVM",
              "type": "object",
              "required": [
                "execute"
              ],
              "properties": {
                "execute": {
                  "type": "object",
                  "required": [
                    "msgs"
                  ],
                  "properties": {
                    "msgs": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/EvmMsg_for_String"
                      }
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Packet": {
          "type": "object",
          "required": [
            "msg",
            "sender"
          ],
          "properties": {
            "msg": {
              "description": "Message to execute on voice chain.",
              "allOf": [
                {
                  "$ref": "#/definitions/Msg"
                }
              ]
            },
            "sender": {
              "description": "Message sender on the note chain.",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "Result_of_ExecutionResponse_or_String": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "Ok"
              ],
              "properties": {
                "Ok": {
                  "$ref": "#/definitions/ExecutionResponse"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "Err"
              ],
              "properties": {
                "Err": {
                  "type": "string"
                }
              }
            }
          ]
        },
        "SentPacketData": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "binary"
              ],
              "properties": {
                "binary": {
                  "$ref": "#/definitions/HexBinary"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "request"
              ],
              "properties": {
                "request": {
                  "$ref": "#/definitions/Packet"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "active_channel": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_String",
      "type": [
        "string",
        "null"
      ]
    },
    "block_max_gas": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Uint64",
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    },
    "pair": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_Pair",
      "anyOf": [
        {
          "$ref": "#/definitions/Pair"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Pair": {
          "description": "This contract's voice. There is one voice per note, and many notes per voice.",
          "type": "object",
          "required": [
            "connection_id",
            "remote_port"
          ],
          "properties": {
            "connection_id": {
              "type": "string"
            },
            "remote_port": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "remote_address": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_String",
      "type": [
        "string",
        "null"
      ]
    }
  }
}
