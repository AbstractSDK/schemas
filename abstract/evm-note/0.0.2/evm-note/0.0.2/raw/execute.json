{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Performs the requested queries on the voice chain and returns a callback of Vec<QuerierResult>, or ACK-FAIL if unmarshalling any of the query requests fails. Executes the requested messages on the voice chain on behalf of the note chain sender. Message receivers can return data in their callbacks by calling `set_data` on their `Response` object. Optionally, returns a callback of `Vec<Callback>` where index `i` corresponds to the callback for `msgs[i]`.\n\nAccounts are created on the voice chain after the first call to execute by the local address. To create an account, but perform no additional actions, pass an empty list to `msgs`. Accounts are queryable via the `RemoteAddress { local_address }` query after they have been created.",
      "type": "object",
      "required": [
        "execute"
      ],
      "properties": {
        "execute": {
          "type": "object",
          "required": [
            "msgs",
            "timeout_seconds"
          ],
          "properties": {
            "callback": {
              "anyOf": [
                {
                  "$ref": "#/definitions/CallbackRequest"
                },
                {
                  "type": "null"
                }
              ]
            },
            "msgs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EvmMsg_for_String"
              }
            },
            "timeout_seconds": {
              "$ref": "#/definitions/Uint64"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "CallbackRequest": {
      "description": "A request for a callback.",
      "type": "object",
      "required": [
        "msg",
        "receiver"
      ],
      "properties": {
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "receiver": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "EvmMsg_for_String": {
      "description": "A message to be sent to the EVM",
      "oneOf": [
        {
          "description": "Call a contract with the given data",
          "type": "object",
          "required": [
            "call"
          ],
          "properties": {
            "call": {
              "type": "object",
              "required": [
                "data",
                "to"
              ],
              "properties": {
                "allow_failure": {
                  "description": "Don't revert entire batch when this transaction fails",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "data": {
                  "description": "The calldata to send to the contract",
                  "allOf": [
                    {
                      "$ref": "#/definitions/HexBinary"
                    }
                  ]
                },
                "to": {
                  "description": "The address of the contract to call, must pass checksum validation",
                  "type": "string"
                },
                "value": {
                  "description": "Native ETH used in the tx",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Delegate a call to an external contract. This is dangerous and should be used with caution.",
          "type": "object",
          "required": [
            "delegate_call"
          ],
          "properties": {
            "delegate_call": {
              "type": "object",
              "required": [
                "data",
                "to"
              ],
              "properties": {
                "allow_failure": {
                  "description": "Don't revert entire batch when this transaction fails",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "data": {
                  "description": "The calldata to send to the contract",
                  "allOf": [
                    {
                      "$ref": "#/definitions/HexBinary"
                    }
                  ]
                },
                "to": {
                  "description": "The address of the contract to call, must pass checksum validation",
                  "type": "string"
                },
                "value": {
                  "description": "Native ETH used in the tx",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "HexBinary": {
      "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
