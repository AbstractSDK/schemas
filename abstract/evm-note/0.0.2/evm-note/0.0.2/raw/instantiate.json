{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "block_max_gas"
  ],
  "properties": {
    "block_max_gas": {
      "description": "The max gas allowed in a transaction. When returning callbacks the module will use this to calculate the amount of gas to save for handling a callback error. This protects from callbacks that run out of gas preventing ACKs or timeouts from being returned.\n\nThe contract admin can update with `MigrateMsg::WithUpdate`.",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "pair": {
      "description": "This contract pairs with the first voice module that a relayer connects it with, or the pair specified here. Once it has a pair, it will never handshake with a different voice module, even after channel closure. This ensures that there will only ever be one voice for every note.",
      "anyOf": [
        {
          "$ref": "#/definitions/Pair"
        },
        {
          "type": "null"
        }
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Pair": {
      "description": "This contract's voice. There is one voice per note, and many notes per voice.",
      "type": "object",
      "required": [
        "connection_id",
        "remote_port"
      ],
      "properties": {
        "connection_id": {
          "type": "string"
        },
        "remote_port": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
