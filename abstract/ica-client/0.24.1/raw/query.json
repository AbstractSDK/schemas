{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "Returns config Returns [`ConfigResponse`]",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "ica_action"
      ],
      "properties": {
        "ica_action": {
          "type": "object",
          "required": [
            "account_address",
            "actions",
            "chain"
          ],
          "properties": {
            "account_address": {
              "type": "string"
            },
            "actions": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IcaAction"
              }
            },
            "chain": {
              "$ref": "#/definitions/TruncatedChainId"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Query the contract's ownership information",
      "type": "object",
      "required": [
        "ownership"
      ],
      "properties": {
        "ownership": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "CallbackRequest": {
      "description": "A request for a callback.",
      "type": "object",
      "required": [
        "msg",
        "receiver"
      ],
      "properties": {
        "msg": {
          "$ref": "#/definitions/Binary"
        },
        "receiver": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "EvmMsg_for_String": {
      "description": "A message to be sent to the EVM",
      "oneOf": [
        {
          "description": "Call a contract with the given data",
          "type": "object",
          "required": [
            "call"
          ],
          "properties": {
            "call": {
              "type": "object",
              "required": [
                "data",
                "to"
              ],
              "properties": {
                "allow_failure": {
                  "description": "Don't revert entire batch when this transaction fails",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "data": {
                  "description": "The calldata to send to the contract",
                  "allOf": [
                    {
                      "$ref": "#/definitions/HexBinary"
                    }
                  ]
                },
                "to": {
                  "description": "The address of the contract to call, must pass checksum validation",
                  "type": "string"
                },
                "value": {
                  "description": "Native ETH used in the tx",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Delegate a call to an external contract. This is dangerous and should be used with caution.",
          "type": "object",
          "required": [
            "delegate_call"
          ],
          "properties": {
            "delegate_call": {
              "type": "object",
              "required": [
                "data",
                "to"
              ],
              "properties": {
                "allow_failure": {
                  "description": "Don't revert entire batch when this transaction fails",
                  "type": [
                    "boolean",
                    "null"
                  ]
                },
                "data": {
                  "description": "The calldata to send to the contract",
                  "allOf": [
                    {
                      "$ref": "#/definitions/HexBinary"
                    }
                  ]
                },
                "to": {
                  "description": "The address of the contract to call, must pass checksum validation",
                  "type": "string"
                },
                "value": {
                  "description": "Native ETH used in the tx",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Uint128"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "HexBinary": {
      "description": "This is a wrapper around Vec<u8> to add hex de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is similar to `cosmwasm_std::Binary` but uses hex. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "IcaAction": {
      "description": "Interchain Account Action",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "execute"
          ],
          "properties": {
            "execute": {
              "$ref": "#/definitions/IcaExecute"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "fund"
          ],
          "properties": {
            "fund": {
              "type": "object",
              "required": [
                "funds"
              ],
              "properties": {
                "funds": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "memo": {
                  "type": [
                    "string",
                    "null"
                  ]
                },
                "receiver": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Binary"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "IcaExecute": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "evm"
          ],
          "properties": {
            "evm": {
              "type": "object",
              "required": [
                "msgs"
              ],
              "properties": {
                "callback": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/CallbackRequest"
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "msgs": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/EvmMsg_for_String"
                  }
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TruncatedChainId": {
      "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
