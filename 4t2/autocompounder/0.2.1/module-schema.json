{
  "contract_name": "module-schema",
  "contract_version": "0.6.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Init msg",
    "type": "object",
    "required": [
      "code_id",
      "commission_addr",
      "deposit_fees",
      "dex",
      "fee_asset",
      "performance_fees",
      "pool_assets",
      "withdrawal_fees"
    ],
    "properties": {
      "code_id": {
        "description": "cw20 code id",
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "commission_addr": {
        "description": "address that recieves the fee commissions",
        "type": "string"
      },
      "deposit_fees": {
        "$ref": "#/definitions/Decimal"
      },
      "dex": {
        "description": "Name of the target dex",
        "type": "string"
      },
      "fee_asset": {
        "type": "string"
      },
      "performance_fees": {
        "$ref": "#/definitions/Decimal"
      },
      "pool_assets": {
        "description": "Assets in the pool",
        "type": "array",
        "items": {
          "$ref": "#/definitions/AssetEntry"
        }
      },
      "withdrawal_fees": {
        "$ref": "#/definitions/Decimal"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "AssetEntry": {
        "description": "May key to retrieve information on an asset",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_fee_config"
        ],
        "properties": {
          "update_fee_config": {
            "type": "object",
            "properties": {
              "deposit": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "performance": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "withdrawal": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Decimal"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Join vault by depositing one or more funds",
        "type": "object",
        "required": [
          "deposit"
        ],
        "properties": {
          "deposit": {
            "type": "object",
            "required": [
              "funds"
            ],
            "properties": {
              "funds": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AnsAsset"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw all unbonded funds",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Compound all rewards in the vault",
        "type": "object",
        "required": [
          "compound"
        ],
        "properties": {
          "compound": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Unbond in batches",
        "type": "object",
        "required": [
          "batch_unbond"
        ],
        "properties": {
          "batch_unbond": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "AnsAsset": {
        "type": "object",
        "required": [
          "amount",
          "name"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "name": {
            "$ref": "#/definitions/AssetEntry"
          }
        }
      },
      "AssetEntry": {
        "description": "May key to retrieve information on an asset",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Query the config of the autocompounder Returns [`ConfigResponse`]",
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "Migrate msg",
    "type": "object",
    "additionalProperties": false
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "commission_addr",
        "fees",
        "liquidity_token",
        "pool_address",
        "pool_data",
        "staking_contract",
        "vault_token"
      ],
      "properties": {
        "bonding_period": {
          "description": "Pool bonding period",
          "anyOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "type": "null"
            }
          ]
        },
        "commission_addr": {
          "description": "Address that receives the fee commissions",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "fees": {
          "description": "Vault fee structure",
          "allOf": [
            {
              "$ref": "#/definitions/FeeConfig"
            }
          ]
        },
        "liquidity_token": {
          "description": "Address of the LP token contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "min_unbonding_cooldown": {
          "description": "minimum unbonding cooldown",
          "anyOf": [
            {
              "$ref": "#/definitions/Duration"
            },
            {
              "type": "null"
            }
          ]
        },
        "pool_address": {
          "description": "Pool address (number or Address)",
          "allOf": [
            {
              "$ref": "#/definitions/PoolAddressBase_for_Addr"
            }
          ]
        },
        "pool_data": {
          "description": "Pool metadata",
          "allOf": [
            {
              "$ref": "#/definitions/PoolMetadata"
            }
          ]
        },
        "staking_contract": {
          "description": "Address of the staking contract",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        },
        "vault_token": {
          "description": "Vault token",
          "allOf": [
            {
              "$ref": "#/definitions/Addr"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "AssetEntry": {
          "description": "May key to retrieve information on an asset",
          "type": "string"
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Duration": {
          "description": "Duration is a delta of time. You can add it to a BlockInfo or Expiration to move that further in the future. Note that an height-based Duration and a time-based Expiration cannot be combined",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "height"
              ],
              "properties": {
                "height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Time in seconds",
              "type": "object",
              "required": [
                "time"
              ],
              "properties": {
                "time": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "FeeConfig": {
          "type": "object",
          "required": [
            "deposit",
            "fee_asset",
            "performance",
            "withdrawal"
          ],
          "properties": {
            "deposit": {
              "$ref": "#/definitions/Decimal"
            },
            "fee_asset": {
              "$ref": "#/definitions/AssetEntry"
            },
            "performance": {
              "$ref": "#/definitions/Decimal"
            },
            "withdrawal": {
              "$ref": "#/definitions/Decimal"
            }
          },
          "additionalProperties": false
        },
        "PoolAddressBase_for_Addr": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "contract"
              ],
              "properties": {
                "contract": {
                  "$ref": "#/definitions/Addr"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "id"
              ],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "PoolMetadata": {
          "type": "object",
          "required": [
            "assets",
            "dex",
            "pool_type"
          ],
          "properties": {
            "assets": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AssetEntry"
              }
            },
            "dex": {
              "type": "string"
            },
            "pool_type": {
              "$ref": "#/definitions/PoolType"
            }
          }
        },
        "PoolType": {
          "type": "string",
          "enum": [
            "ConstantProduct",
            "Stable",
            "Weighted",
            "LiquidityBootstrap"
          ]
        }
      }
    }
  }
}
