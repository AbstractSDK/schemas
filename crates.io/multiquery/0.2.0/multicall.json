{
  "contract_name": "multicall",
  "contract_version": "0.2.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "type": "string",
    "enum": []
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "contract_version"
        ],
        "properties": {
          "contract_version": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "aggregate"
        ],
        "properties": {
          "aggregate": {
            "type": "object",
            "required": [
              "queries"
            ],
            "properties": {
              "queries": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Call"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "try_aggregate"
        ],
        "properties": {
          "try_aggregate": {
            "type": "object",
            "required": [
              "queries"
            ],
            "properties": {
              "include_cause": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "queries": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Call"
                }
              },
              "require_success": {
                "type": [
                  "boolean",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "try_aggregate_optional"
        ],
        "properties": {
          "try_aggregate_optional": {
            "type": "object",
            "required": [
              "queries"
            ],
            "properties": {
              "include_cause": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "queries": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallOptional"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "block_aggregate"
        ],
        "properties": {
          "block_aggregate": {
            "type": "object",
            "required": [
              "queries"
            ],
            "properties": {
              "queries": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Call"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "block_try_aggregate"
        ],
        "properties": {
          "block_try_aggregate": {
            "type": "object",
            "required": [
              "queries"
            ],
            "properties": {
              "include_cause": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "queries": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Call"
                }
              },
              "require_success": {
                "type": [
                  "boolean",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "block_try_aggregate_optional"
        ],
        "properties": {
          "block_try_aggregate_optional": {
            "type": "object",
            "required": [
              "queries"
            ],
            "properties": {
              "include_cause": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "queries": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/CallOptional"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Call": {
        "type": "object",
        "required": [
          "address",
          "data"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/Addr"
          },
          "data": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "CallOptional": {
        "type": "object",
        "required": [
          "address",
          "data",
          "require_success"
        ],
        "properties": {
          "address": {
            "$ref": "#/definitions/Addr"
          },
          "data": {
            "$ref": "#/definitions/Binary"
          },
          "require_success": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "aggregate": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AggregateResult",
      "type": "object",
      "required": [
        "return_data"
      ],
      "properties": {
        "return_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallResult"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CallResult": {
          "type": "object",
          "required": [
            "data",
            "success"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Binary"
            },
            "success": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "block_aggregate": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlockAggregateResult",
      "type": "object",
      "required": [
        "block",
        "return_data"
      ],
      "properties": {
        "block": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "return_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallResult"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CallResult": {
          "type": "object",
          "required": [
            "data",
            "success"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Binary"
            },
            "success": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "block_try_aggregate": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlockAggregateResult",
      "type": "object",
      "required": [
        "block",
        "return_data"
      ],
      "properties": {
        "block": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "return_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallResult"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CallResult": {
          "type": "object",
          "required": [
            "data",
            "success"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Binary"
            },
            "success": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "block_try_aggregate_optional": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BlockAggregateResult",
      "type": "object",
      "required": [
        "block",
        "return_data"
      ],
      "properties": {
        "block": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "return_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallResult"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CallResult": {
          "type": "object",
          "required": [
            "data",
            "success"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Binary"
            },
            "success": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "contract_version": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ContractVersion",
      "type": "object",
      "required": [
        "contract",
        "version"
      ],
      "properties": {
        "contract": {
          "description": "contract is the crate name of the implementing contract, eg. `crate:cw20-base` we will use other prefixes for other languages, and their standard global namespacing",
          "type": "string"
        },
        "version": {
          "description": "version is any string that this implementation knows. It may be simple counter \"1\", \"2\". or semantic version on release tags \"v0.7.0\", or some custom feature flag list. the only code that needs to understand the version parsing is code that knows how to migrate from the given contract (and is tied to it's implementation somehow)",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "try_aggregate": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AggregateResult",
      "type": "object",
      "required": [
        "return_data"
      ],
      "properties": {
        "return_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallResult"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CallResult": {
          "type": "object",
          "required": [
            "data",
            "success"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Binary"
            },
            "success": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "try_aggregate_optional": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AggregateResult",
      "type": "object",
      "required": [
        "return_data"
      ],
      "properties": {
        "return_data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CallResult"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "CallResult": {
          "type": "object",
          "required": [
            "data",
            "success"
          ],
          "properties": {
            "data": {
              "$ref": "#/definitions/Binary"
            },
            "success": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
