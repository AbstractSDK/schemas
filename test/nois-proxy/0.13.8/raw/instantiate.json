{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "callback_gas_limit",
    "mode",
    "prices"
  ],
  "properties": {
    "allowlist": {
      "description": "List of addresses allowed to get randomness. This is optional and can be omitted. Defaults to an empty list.",
      "type": [
        "array",
        "null"
      ],
      "items": {
        "type": "string"
      }
    },
    "allowlist_enabled": {
      "description": "Toggle caller allowlist allowed to get randomness. This is optional and can be omitted. Defaults to false.",
      "type": [
        "boolean",
        "null"
      ]
    },
    "callback_gas_limit": {
      "description": "The amount of gas that the callback to the dapp can consume",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "manager": {
      "type": [
        "string",
        "null"
      ]
    },
    "mode": {
      "$ref": "#/definitions/OperationalMode"
    },
    "prices": {
      "description": "The prices of a randomness. List is to be interpreted as oneof, i.e. payment must be paid in one of those denominations. If this list is empty, the user cannot pay. This can be used to put the contract out of service.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Coin"
      }
    },
    "test_mode": {
      "description": "In test mode the min publish time calculation is detached from the clock. This is for testing only. Setting the field to `None` equals `Some(false)`. Using an optional type allows omitting the field in JSON instantiation messages.",
      "type": [
        "boolean",
        "null"
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "IbcDenom": {
      "description": "The denom information required to send a MsgTransfer. Ideally we could just query the ICS-20 channel ID and did not have to store it, but CosmWasm currently does not provide the query for it.",
      "type": "object",
      "required": [
        "denom",
        "ics20_channel"
      ],
      "properties": {
        "denom": {
          "description": "The ibc/* denom for the token",
          "type": "string"
        },
        "ics20_channel": {
          "description": "The ICS-20 channel ID of the NOIS token on the consummer chain",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "OperationalMode": {
      "description": "Defines how the proxy handles payment of its randomness requests. This only affects the proxy-Nois side. Users of the proxy always have to pay the amount set in `prices`.",
      "oneOf": [
        {
          "description": "Someone fills the payment contract of the proxy on behalf of the proxy. This can happen onchain or offchain, automated or manually.",
          "type": "object",
          "required": [
            "funded"
          ],
          "properties": {
            "funded": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Proxy contract sends IBCed NOIS to the gateway for each beacon request.",
          "type": "object",
          "required": [
            "ibc_pay"
          ],
          "properties": {
            "ibc_pay": {
              "type": "object",
              "required": [
                "unois_denom"
              ],
              "properties": {
                "unois_denom": {
                  "description": "The denom of the IBCed unois token",
                  "allOf": [
                    {
                      "$ref": "#/definitions/IbcDenom"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
