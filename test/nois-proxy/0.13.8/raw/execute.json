{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "type": "object",
      "required": [
        "get_next_randomness"
      ],
      "properties": {
        "get_next_randomness": {
          "type": "object",
          "required": [
            "job_id"
          ],
          "properties": {
            "job_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "get_randomness_after"
      ],
      "properties": {
        "get_randomness_after": {
          "type": "object",
          "required": [
            "after",
            "job_id"
          ],
          "properties": {
            "after": {
              "$ref": "#/definitions/Timestamp"
            },
            "job_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Set the config",
      "type": "object",
      "required": [
        "set_config"
      ],
      "properties": {
        "set_config": {
          "type": "object",
          "properties": {
            "allowlist_enabled": {
              "description": "Toggle address allowlist to get randomness. When enabled, the allowlist is checked. Otherwise the allowlist entries are ignored.",
              "type": [
                "boolean",
                "null"
              ]
            },
            "callback_gas_limit": {
              "description": "The amount of gas that the callback to the dapp can consume",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "manager": {
              "type": [
                "string",
                "null"
              ]
            },
            "max_after": {
              "description": "The maximum value for `after` when requesting a beacon. This aims to counter accidental misusage. Not all values in the allowed range are reasonable.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "min_after": {
              "description": "The minimal value for `after` when requesting a beacon. This aims to counter accidental misusage. Not all values in the allowed range are reasonable.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "mode": {
              "anyOf": [
                {
                  "$ref": "#/definitions/OperationalMode"
                },
                {
                  "type": "null"
                }
              ]
            },
            "nois_beacon_price": {
              "description": "The amount of tokens the proxy sends for each randomness request to the Nois chain",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "payment": {
              "description": "Address of the payment contract (on the other chain)",
              "type": [
                "string",
                "null"
              ]
            },
            "prices": {
              "description": "The prices of a randomness. List is to be interpreted as oneof, i.e. payment must be paid in one of those denominations. If this list is empty, the user cannot pay. This can be used to put the contract out of service.",
              "type": [
                "array",
                "null"
              ],
              "items": {
                "$ref": "#/definitions/Coin"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "withdraw"
      ],
      "properties": {
        "withdraw": {
          "type": "object",
          "required": [
            "address",
            "denom"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "amount": {
              "description": "The amount of tokens to withdraw. If None, withdraw all available balance of the given denom.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Uint128"
                },
                {
                  "type": "null"
                }
              ]
            },
            "denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "update_allowlist"
      ],
      "properties": {
        "update_allowlist": {
          "type": "object",
          "required": [
            "add",
            "remove"
          ],
          "properties": {
            "add": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "remove": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "IbcDenom": {
      "description": "The denom information required to send a MsgTransfer. Ideally we could just query the ICS-20 channel ID and did not have to store it, but CosmWasm currently does not provide the query for it.",
      "type": "object",
      "required": [
        "denom",
        "ics20_channel"
      ],
      "properties": {
        "denom": {
          "description": "The ibc/* denom for the token",
          "type": "string"
        },
        "ics20_channel": {
          "description": "The ICS-20 channel ID of the NOIS token on the consummer chain",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "OperationalMode": {
      "description": "Defines how the proxy handles payment of its randomness requests. This only affects the proxy-Nois side. Users of the proxy always have to pay the amount set in `prices`.",
      "oneOf": [
        {
          "description": "Someone fills the payment contract of the proxy on behalf of the proxy. This can happen onchain or offchain, automated or manually.",
          "type": "object",
          "required": [
            "funded"
          ],
          "properties": {
            "funded": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Proxy contract sends IBCed NOIS to the gateway for each beacon request.",
          "type": "object",
          "required": [
            "ibc_pay"
          ],
          "properties": {
            "ibc_pay": {
              "type": "object",
              "required": [
                "unois_denom"
              ],
              "properties": {
                "unois_denom": {
                  "description": "The denom of the IBCed unois token",
                  "allOf": [
                    {
                      "$ref": "#/definitions/IbcDenom"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
