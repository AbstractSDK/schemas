{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ConfigResponse",
  "type": "object",
  "required": [
    "config"
  ],
  "properties": {
    "config": {
      "$ref": "#/definitions/Config"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Config": {
      "type": "object",
      "required": [
        "callback_gas_limit",
        "mode",
        "nois_beacon_price",
        "nois_beacon_price_updated",
        "prices",
        "test_mode"
      ],
      "properties": {
        "allowlist_enabled": {
          "description": "Enable whitelist of addresses allowed to get randomness. This is an Option for compatibility with older versions of the contract. If set to None it means disabled. From instances running version 0.13.5 onwards, the value is always set to Some(..).",
          "type": [
            "boolean",
            "null"
          ]
        },
        "callback_gas_limit": {
          "description": "The amount of gas that the callback to the dapp can consume",
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "manager": {
          "description": "Manager to set the config and withdraw funds",
          "anyOf": [
            {
              "$ref": "#/definitions/Addr"
            },
            {
              "type": "null"
            }
          ]
        },
        "max_after": {
          "description": "The maximum value for `after` when requesting a beacon. This aims to counter accidental misusage. Not all values in the allowed range are reasonable. This is an Option for compatibility with older versions of the contract that did not have the field. From instances running version 0.13.5 onwards, the value is always set to Some(..).",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "min_after": {
          "description": "The minimal value for `after` when requesting a beacon. This aims to counter accidental misusage. Not all values in the allowed range are reasonable. This is an Option for compatibility with older versions of the contract that did not have the field. From instances running version 0.13.5 onwards, the value is always set to Some(..).",
          "anyOf": [
            {
              "$ref": "#/definitions/Timestamp"
            },
            {
              "type": "null"
            }
          ]
        },
        "mode": {
          "$ref": "#/definitions/OperationalMode"
        },
        "nois_beacon_price": {
          "description": "The amount of tokens the proxy sends for each randomness request to the Nois chain",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "nois_beacon_price_updated": {
          "description": "The time (on the Nois chain) the price info was created",
          "allOf": [
            {
              "$ref": "#/definitions/Timestamp"
            }
          ]
        },
        "payment": {
          "description": "Address of the payment contract (on the other chain)",
          "type": [
            "string",
            "null"
          ]
        },
        "prices": {
          "description": "The prices of a randomness. List is to be interpreted as oneof, i.e. payment must be paid in one of those denominations. If this list is empty, the user cannot pay. This can be used to put the contract out of service.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        },
        "test_mode": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "IbcDenom": {
      "description": "The denom information required to send a MsgTransfer. Ideally we could just query the ICS-20 channel ID and did not have to store it, but CosmWasm currently does not provide the query for it.",
      "type": "object",
      "required": [
        "denom",
        "ics20_channel"
      ],
      "properties": {
        "denom": {
          "description": "The ibc/* denom for the token",
          "type": "string"
        },
        "ics20_channel": {
          "description": "The ICS-20 channel ID of the NOIS token on the consummer chain",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "OperationalMode": {
      "description": "Defines how the proxy handles payment of its randomness requests. This only affects the proxy-Nois side. Users of the proxy always have to pay the amount set in `prices`.",
      "oneOf": [
        {
          "description": "Someone fills the payment contract of the proxy on behalf of the proxy. This can happen onchain or offchain, automated or manually.",
          "type": "object",
          "required": [
            "funded"
          ],
          "properties": {
            "funded": {
              "type": "object",
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Proxy contract sends IBCed NOIS to the gateway for each beacon request.",
          "type": "object",
          "required": [
            "ibc_pay"
          ],
          "properties": {
            "ibc_pay": {
              "type": "object",
              "required": [
                "unois_denom"
              ],
              "properties": {
                "unois_denom": {
                  "description": "The denom of the IBCed unois token",
                  "allOf": [
                    {
                      "$ref": "#/definitions/IbcDenom"
                    }
                  ]
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
